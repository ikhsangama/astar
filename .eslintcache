[{"D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\index.js":"1","D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\App.js":"2","D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\reportWebVitals.js":"3","D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\pages\\index.js":"4","D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\pages\\QuizPage.jsx":"5","D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\services\\quizServices.js":"6","D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\components\\index.js":"7","D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\components\\QuizDraggableComponent.jsx":"8","D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\components\\CountingImageComponent.jsx":"9","D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\components\\QuizShortResponseComponent.jsx":"10","D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\components\\QuizSingleCorrectComponent.jsx":"11","D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\components\\QuizMultipleCorrectComponent.jsx":"12","D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\components\\OneImageComponent.jsx":"13","D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\components\\ScoreIndicatorComponent.jsx":"14","D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\components\\FinishComponent.jsx":"15","D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\components\\ScoreBannerComponent.jsx":"16","D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\components\\DragAndDropComponent.jsx":"17"},{"size":684,"mtime":1607072196664,"results":"18","hashOfConfig":"19"},{"size":220,"mtime":1607072196659,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":499162500000,"results":"21","hashOfConfig":"19"},{"size":48,"mtime":1607072196665,"results":"22","hashOfConfig":"19"},{"size":5876,"mtime":1607072196664,"results":"23","hashOfConfig":"19"},{"size":5889,"mtime":1607072196666,"results":"24","hashOfConfig":"19"},{"size":800,"mtime":1607072196663,"results":"25","hashOfConfig":"19"},{"size":2288,"mtime":1607072196661,"results":"26","hashOfConfig":"19"},{"size":768,"mtime":1607072196659,"results":"27","hashOfConfig":"19"},{"size":1101,"mtime":1607072196662,"results":"28","hashOfConfig":"19"},{"size":1221,"mtime":1607072196662,"results":"29","hashOfConfig":"19"},{"size":1420,"mtime":1607072196661,"results":"30","hashOfConfig":"19"},{"size":308,"mtime":1607072196660,"results":"31","hashOfConfig":"19"},{"size":335,"mtime":1607072196663,"results":"32","hashOfConfig":"19"},{"size":825,"mtime":1607072196660,"results":"33","hashOfConfig":"19"},{"size":927,"mtime":1607072196663,"results":"34","hashOfConfig":"19"},{"size":577,"mtime":1607072196660,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1k0unw1",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"40"},"D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\index.js",[],"D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\App.js",[],["80","81"],"D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\reportWebVitals.js",[],"D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\pages\\index.js",[],"D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\pages\\QuizPage.jsx",["82","83","84"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  CountingImageComponent,\r\n  OneImageComponent,\r\n  QuizDraggableComponent,\r\n  QuizSingleCorrectComponent,\r\n  QuizMultipleCorrectComponent,\r\n  QuizShortResponseComponent,\r\n  ScoreBannerComponent,\r\n  FinishComponent,\r\n} from \"../components\";\r\n\r\nimport { Container, Heading, VStack, Button } from \"@chakra-ui/react\";\r\n//\r\nimport { fetchQuizes } from \"../services/quizServices\";\r\n\r\nexport default function QuizPage() {\r\n  const [quizes, setQuizes] = useState();\r\n  const [quiz, setQuiz] = useState();\r\n  const [yourAnswer, setYourAnswer] = useState();\r\n  const [track, setTrack] = useState();\r\n  const [quizNumber, setQuizNumber] = useState();\r\n  const [isFinished, setIsFinished] = useState(false);\r\n\r\n  // first time render\r\n  useEffect(() => {\r\n    // make it as separated function because used on first play and reset button\r\n    start();\r\n  }, []);\r\n\r\n  // set quiz after fetch\r\n  useEffect(() => {\r\n    if (quizes) {\r\n      setQuizNumber(0);\r\n      setQuiz(quizes[quizNumber]);\r\n      setTrack(new Array(quizes.length).fill(null));\r\n    }\r\n  }, [quizes]);\r\n\r\n  // automatically change quiz after clicking \"lanjut\"\r\n  useEffect(() => {\r\n    setQuiz(quizes?.[quizNumber]);\r\n  }, [quizNumber]);\r\n\r\n  /**\r\n   *\r\n   * @param {Array} array\r\n   * return shuffled array\r\n   */\r\n  function shuffle(array) {\r\n    var currentIndex = array.length,\r\n      temporaryValue,\r\n      randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n\r\n      // And swap it with the current element.\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\n  /**\r\n   * to first time render and reset button\r\n   */\r\n  const start = () => {\r\n    let getQuizesFromServices = fetchQuizes();\r\n    let getRandomQuizOrder = shuffle(getQuizesFromServices);\r\n    setQuizes(getRandomQuizOrder);\r\n    setIsFinished(false);\r\n  };\r\n\r\n  /**\r\n   * Render by question asset\r\n   * @param {String} type\r\n   */\r\n  const renderQuestionType = (type) => {\r\n    switch (type) {\r\n      case \"counting\":\r\n        return (\r\n          <>\r\n            <CountingImageComponent quiz={quiz} />\r\n          </>\r\n        );\r\n      case \"image\":\r\n        return (\r\n          <>\r\n            <OneImageComponent quiz={quiz} />\r\n          </>\r\n        );\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  /**\r\n   *\r\n   * @param {String} quizType\r\n   * return quiz component based on quiz type\r\n   */\r\n  const renderAnswerType = (type) => {\r\n    switch (type) {\r\n      case \"draggable\":\r\n        return (\r\n          <>\r\n            <QuizDraggableComponent quiz={quiz} setYourAnswer={setYourAnswer} />\r\n          </>\r\n        );\r\n      case \"singleCorrectOptions\":\r\n        return (\r\n          <>\r\n            <QuizSingleCorrectComponent\r\n              quiz={quiz}\r\n              setYourAnswer={setYourAnswer}\r\n            />\r\n          </>\r\n        );\r\n      case \"multipleCorrectOptions\":\r\n        return (\r\n          <>\r\n            <QuizMultipleCorrectComponent\r\n              quiz={quiz}\r\n              setYourAnswer={setYourAnswer}\r\n            />\r\n          </>\r\n        );\r\n      case \"shortResponse\":\r\n        return (\r\n          <>\r\n            <QuizShortResponseComponent\r\n              quiz={quiz}\r\n              setYourAnswer={setYourAnswer}\r\n              yourAnswer={yourAnswer}\r\n            />\r\n          </>\r\n        );\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * go to the next question\r\n   */\r\n  const onNext = () => {\r\n    tracking();\r\n    // go to next quiz\r\n    setYourAnswer(undefined);\r\n    if (quizNumber < quizes.length - 1) {\r\n      setQuizNumber(quizNumber + 1);\r\n    } else {\r\n      // if finish\r\n      setIsFinished(true);\r\n    }\r\n  };\r\n\r\n  /**\r\n   *  tracking either answer right or wrong\r\n   */\r\n  const tracking = () => {\r\n    let items = [...track];\r\n    items[quizNumber] = checkAnswer();\r\n    setTrack(items);\r\n  };\r\n\r\n  /**\r\n   * check answer based on question type\r\n   */\r\n  const checkAnswer = () => {\r\n    switch (quiz.answer.type) {\r\n      case \"draggable\":\r\n        return JSON.stringify(quiz.answer.value) === JSON.stringify(yourAnswer);\r\n      case \"singleCorrectOptions\":\r\n        return quiz.answer.value === yourAnswer;\r\n      case \"multipleCorrectOptions\":\r\n        return JSON.stringify(quiz.answer.value) === JSON.stringify(yourAnswer);\r\n      case \"shortResponse\":\r\n        return (\r\n          String(quiz.answer.value).toLowerCase() ===\r\n          String(yourAnswer).toLowerCase()\r\n        );\r\n      default:\r\n        return false;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * if isFinished === true, render result component\r\n   */\r\n  const renderResult = () => {\r\n    return <FinishComponent track={track} />;\r\n  };\r\n\r\n  // Quiz Page\r\n  return (\r\n    <>\r\n      <ScoreBannerComponent track={track} />\r\n      <Container maxW=\"xl\" centerContent>\r\n        {isFinished ? (\r\n          // finished\r\n          <>\r\n            {renderResult()}\r\n            <Button bgColor=\"cyan.600\" marginTop=\"20px\" onClick={() => start()}>\r\n              Reset\r\n            </Button>\r\n          </>\r\n        ) : (\r\n          // not finish\r\n          <>\r\n            <VStack spacing={10} height=\"60vh\">\r\n              <Heading fontSize=\"2xl\"> {quiz?.question.text} </Heading>\r\n              {renderQuestionType(quiz?.question?.type)}\r\n              {renderAnswerType(quiz?.answer?.type)}\r\n            </VStack>\r\n            <Button\r\n              colorScheme=\"blue\"\r\n              marginTop=\"20px\"\r\n              onClick={() => onNext()}\r\n            >\r\n              Lanjut\r\n            </Button>\r\n          </>\r\n        )}\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n","D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\services\\quizServices.js",[],"D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\components\\index.js",[],"D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\components\\QuizDraggableComponent.jsx",["85","86","87","88"],"import React, { useEffect, useState } from \"react\";\r\nimport { Stack, Text } from \"@chakra-ui/react\";\r\n//\r\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\r\nimport { DragAndDropComponent } from \"./index\";\r\n//\r\n\r\nexport default function DraggableQuizComponent({ quiz, setYourAnswer }) {\r\n  const [unorderImages, setUnorderImages] = useState(quiz.answer.assets);\r\n\r\n  useEffect(() => {\r\n    setUnorderImages(quiz.answer.assets);\r\n  }, [quiz]);\r\n\r\n  const onDragEnd = (result) => {\r\n    const { source, destination, draggableId } = result;\r\n    // exit if it's out of the draggable area\r\n    if (!destination) {\r\n      return;\r\n    }\r\n    // exit if it's same position\r\n    if (\r\n      destination.droppableId == source.droppableId &&\r\n      destination.index == source.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    // copying\r\n    const copyUnorderImages = Array.from(unorderImages);\r\n    // splice and insert to destination index\r\n    copyUnorderImages.splice(source.index, 1);\r\n    copyUnorderImages.splice(destination.index, 0, unorderImages[source.index]);\r\n    // update state\r\n    setUnorderImages(copyUnorderImages);\r\n    const answer = getAnswer(copyUnorderImages);\r\n    // set the answer\r\n    setYourAnswer(answer);\r\n  };\r\n\r\n  /**\r\n   * get answer after drag and drop\r\n   * @param {Array} answerImages\r\n   */\r\n  const getAnswer = (answerImages) => {\r\n    let answerList = answerImages.map((image) => image.value);\r\n    return answerList;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Stack spacing=\"10\" align=\"center\">\r\n        <div>\r\n          <DragDropContext onDragEnd={onDragEnd}>\r\n            <Droppable droppableId=\"droppable\" direction=\"horizontal\">\r\n              {(provided) => (\r\n                <div ref={provided.innerRef} {...provided.droppableProps}>\r\n                  {unorderImages.map((asset, index) => {\r\n                    return (\r\n                      <DragAndDropComponent\r\n                        asset={asset}\r\n                        index={index}\r\n                        key={index}\r\n                      />\r\n                    );\r\n                  })}\r\n                  {provided.placeholder}\r\n                </div>\r\n              )}\r\n            </Droppable>\r\n          </DragDropContext>\r\n        </div>\r\n      </Stack>\r\n    </>\r\n  );\r\n}\r\n","D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\components\\CountingImageComponent.jsx",["89","90"],"import React, { useState } from \"react\";\r\n\r\nexport default function CountingImageComponent({ quiz }) {\r\n  // if dont have assets image, no need to use quizImage\r\n  return (\r\n    <>\r\n      {\r\n        // if there's an image in quiz, do render\r\n        quiz.question.count && (\r\n          <div>\r\n            {[...Array(quiz.question.count)].map((e, index) => {\r\n              return (\r\n                <img\r\n                  src={quiz.question.assets}\r\n                  key={index}\r\n                  style={{\r\n                    display: \"inline-block\",\r\n                    maxWidth: \"60px\",\r\n                    maxHeight: \"60px\",\r\n                  }}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        )\r\n      }\r\n    </>\r\n  );\r\n}\r\n","D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\components\\QuizShortResponseComponent.jsx",["91","92"],"import React, { useEffect, useState } from \"react\";\r\nimport { Input, NumberInput, NumberInputField } from \"@chakra-ui/react\";\r\n\r\nexport default function QuizShortResponseComponent({\r\n  quiz,\r\n  setYourAnswer,\r\n  yourAnswer,\r\n}) {\r\n  /**\r\n   * Update yourAnswer state\r\n   * @param {*} event\r\n   */\r\n  const onTyping = (event) => {\r\n    setYourAnswer(event.target.value);\r\n  };\r\n\r\n  /**\r\n   * Render input box based on answer type\r\n   */\r\n  const renderByAnswerType = () => {\r\n    if (typeof quiz.answer.value == \"number\") {\r\n      return (\r\n        <NumberInput\r\n          maxW={20}\r\n          max={999}\r\n          keepWithinRange={true}\r\n          clampValueOnBlur={true}\r\n        >\r\n          <NumberInputField\r\n            placeholder=\"0-999\"\r\n            onChange={(e) => onTyping(e)}\r\n            value={yourAnswer || null}\r\n          />\r\n        </NumberInput>\r\n      );\r\n    }\r\n    return (\r\n      <Input\r\n        onChange={(e) => onTyping(e)}\r\n        placeholder=\"Jawab..\"\r\n        maxW={80}\r\n        value={yourAnswer || \"\"}\r\n      />\r\n    );\r\n  };\r\n  return <>{renderByAnswerType()}</>;\r\n}\r\n","D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\components\\QuizSingleCorrectComponent.jsx",["93","94","95"],"import React, { useState } from \"react\";\r\nimport {\r\n  Stack,\r\n  Text,\r\n  Box,\r\n  RadioGroup,\r\n  Radio,\r\n  Image,\r\n  SimpleGrid,\r\n} from \"@chakra-ui/react\";\r\n// import \"./QuizSingleCorrectComponent.css\";\r\n\r\nexport default function SingleCorrectQuizComponent({ quiz, setYourAnswer }) {\r\n  // if they dont have assets image, no need to use quizImage\r\n  // const [quizImage, setQuizImage] = useState(quiz.assets?.image);\r\n  const onAnswer = (event) => {\r\n    setYourAnswer(event);\r\n  };\r\n  return (\r\n    <>\r\n      <Stack spacing=\"10\" align=\"center\">\r\n        <RadioGroup onChange={(e) => onAnswer(e)}>\r\n          <Stack direction=\"row\">\r\n            <SimpleGrid columns={2} spacingX=\"40px\" spacingY=\"20px\">\r\n              {/* if there is an image asset, load it */}\r\n              {quiz.answer.assets.map((asset, index) => (\r\n                <Radio value={asset.value} key={index}>\r\n                  {asset.image ? (\r\n                    <Image src={asset.image} alt={asset.value} maxH={40} />\r\n                  ) : (\r\n                    asset.value\r\n                  )}\r\n                </Radio>\r\n              ))}\r\n            </SimpleGrid>\r\n          </Stack>\r\n        </RadioGroup>\r\n      </Stack>\r\n    </>\r\n  );\r\n}\r\n","D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\components\\QuizMultipleCorrectComponent.jsx",["96","97"],"import React, { useState } from \"react\";\r\nimport { SimpleGrid, Box, Image, Checkbox } from \"@chakra-ui/react\";\r\n\r\nexport default function QuizMultipleCorrectComponent({ quiz, setYourAnswer }) {\r\n  const [currentAnswer, setCurrentAnswer] = useState(\r\n    quiz.answer.assets.map((asset) => {\r\n      let object = {};\r\n      object.value = asset.value;\r\n      object.isChecked = false;\r\n      return object;\r\n    })\r\n  );\r\n  /**\r\n   * update yourAnswer state from checkbox\r\n   * @param {*} event\r\n   */\r\n  const handleCheck = (event) => {\r\n    const copyCurrentAnswer = Array.from(currentAnswer);\r\n    copyCurrentAnswer.forEach((el) => {\r\n      if (el.value == [event.target.value]) {\r\n        el.isChecked = event.target.checked;\r\n      }\r\n    });\r\n    let answer = copyCurrentAnswer.flatMap((element) => {\r\n      if (element.isChecked) return element.value;\r\n      return [];\r\n    });\r\n    setYourAnswer(answer);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* {JSON.stringify(quiz)} */}\r\n      <SimpleGrid columns={2} spacingX=\"40px\" spacingY=\"20px\">\r\n        {quiz.answer.assets.map((asset) => (\r\n          <Checkbox\r\n            key={asset.value}\r\n            value={asset.value}\r\n            onClick={(e) => handleCheck(e)}\r\n          >\r\n            <Box bg=\"\" maxH=\"120px\" maxW=\"120px\">\r\n              <Image src={asset.image} />\r\n            </Box>\r\n          </Checkbox>\r\n        ))}\r\n      </SimpleGrid>\r\n    </>\r\n  );\r\n}\r\n","D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\components\\OneImageComponent.jsx",["98"],"import React from \"react\";\r\n\r\nexport default function OneImageComponent({ quiz }) {\r\n  return (\r\n    <>\r\n      <img\r\n        src={quiz.question.assets}\r\n        style={{\r\n          display: \"inline-block\",\r\n          maxWidth: \"300px\",\r\n          maxHeight: \"300px\",\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\components\\ScoreIndicatorComponent.jsx",[],"D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\components\\FinishComponent.jsx",["99"],"import React from \"react\";\r\nimport { CircularProgress, CircularProgressLabel } from \"@chakra-ui/react\";\r\n\r\nexport default function FinishComponent({ track }) {\r\n  const totalQuiz = track.length;\r\n  const totalTrue = track.filter((el) => el).length;\r\n  const percentage = totalTrue / totalQuiz;\r\n\r\n  /**\r\n   * color weight based on chakra default theme\r\n   */\r\n  const giveGreenColor = () => {\r\n    const fullColor = 1000;\r\n    let color = percentage * fullColor - 100;\r\n    if (percentage == 0.1) color = 100;\r\n    return `green.${color}`;\r\n  };\r\n\r\n  return (\r\n    <CircularProgress\r\n      value={percentage * 100}\r\n      size={80}\r\n      color={giveGreenColor()}\r\n    >\r\n      <CircularProgressLabel>\r\n        Your Score:\r\n        <b>{percentage * 100}</b>\r\n      </CircularProgressLabel>\r\n    </CircularProgress>\r\n  );\r\n}\r\n","D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\components\\ScoreBannerComponent.jsx",[],"D:\\A\\11_November\\Career\\ASTAR\\astar-assignment\\src\\components\\DragAndDropComponent.jsx",["100","101"],"// functionality\r\nimport React from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\nexport default function DragAndDropComponent({ asset, index }) {\r\n  return (\r\n    <Draggable draggableId={`asset-${index}`} index={index}>\r\n      {(provided) => (\r\n        <div\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n          ref={provided.innerRef}\r\n          className=\"ImageContainer\"\r\n        >\r\n          <img src={asset.image} alt={asset.image} />\r\n        </div>\r\n      )}\r\n    </Draggable>\r\n  );\r\n}\r\n",{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":29,"column":6,"nodeType":"108","endLine":29,"endColumn":8,"suggestions":"109"},{"ruleId":"106","severity":1,"message":"110","line":38,"column":6,"nodeType":"108","endLine":38,"endColumn":14,"suggestions":"111"},{"ruleId":"106","severity":1,"message":"112","line":43,"column":6,"nodeType":"108","endLine":43,"endColumn":18,"suggestions":"113"},{"ruleId":"114","severity":1,"message":"115","line":2,"column":17,"nodeType":"116","messageId":"117","endLine":2,"endColumn":21},{"ruleId":"114","severity":1,"message":"118","line":16,"column":34,"nodeType":"116","messageId":"117","endLine":16,"endColumn":45},{"ruleId":"119","severity":1,"message":"120","line":23,"column":31,"nodeType":"121","messageId":"122","endLine":23,"endColumn":33},{"ruleId":"119","severity":1,"message":"120","line":24,"column":25,"nodeType":"121","messageId":"122","endLine":24,"endColumn":27},{"ruleId":"114","severity":1,"message":"123","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":25},{"ruleId":"124","severity":1,"message":"125","line":13,"column":17,"nodeType":"126","endLine":21,"endColumn":19},{"ruleId":"114","severity":1,"message":"127","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":26},{"ruleId":"114","severity":1,"message":"123","line":1,"column":28,"nodeType":"116","messageId":"117","endLine":1,"endColumn":36},{"ruleId":"114","severity":1,"message":"123","line":1,"column":17,"nodeType":"116","messageId":"117","endLine":1,"endColumn":25},{"ruleId":"114","severity":1,"message":"115","line":4,"column":3,"nodeType":"116","messageId":"117","endLine":4,"endColumn":7},{"ruleId":"114","severity":1,"message":"128","line":5,"column":3,"nodeType":"116","messageId":"117","endLine":5,"endColumn":6},{"ruleId":"114","severity":1,"message":"129","line":5,"column":25,"nodeType":"116","messageId":"117","endLine":5,"endColumn":41},{"ruleId":"119","severity":1,"message":"120","line":20,"column":20,"nodeType":"121","messageId":"122","endLine":20,"endColumn":22},{"ruleId":"124","severity":1,"message":"125","line":6,"column":7,"nodeType":"126","endLine":13,"endColumn":9},{"ruleId":"119","severity":1,"message":"120","line":15,"column":20,"nodeType":"121","messageId":"122","endLine":15,"endColumn":22},{"ruleId":"114","severity":1,"message":"130","line":3,"column":10,"nodeType":"116","messageId":"117","endLine":3,"endColumn":25},{"ruleId":"114","severity":1,"message":"131","line":3,"column":27,"nodeType":"116","messageId":"117","endLine":3,"endColumn":36},"no-native-reassign",["132"],"no-negated-in-lhs",["133"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'start'. Either include it or remove the dependency array.","ArrayExpression",["134"],"React Hook useEffect has a missing dependency: 'quizNumber'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setQuiz' needs the current value of 'quizNumber'.",["135"],"React Hook useEffect has a missing dependency: 'quizes'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setQuiz' needs the current value of 'quizes'.",["136"],"no-unused-vars","'Text' is defined but never used.","Identifier","unusedVar","'draggableId' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useEffect' is defined but never used.","'Box' is defined but never used.","'setCurrentAnswer' is assigned a value but never used.","'DragDropContext' is defined but never used.","'Droppable' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},{"desc":"139","fix":"141"},"Update the dependencies array to be: [start]",{"range":"142","text":"143"},"Update the dependencies array to be: [quizNumber, quizes]",{"range":"144","text":"145"},{"range":"146","text":"145"},[908,910],"[start]",[1110,1118],"[quizNumber, quizes]",[1242,1254]]